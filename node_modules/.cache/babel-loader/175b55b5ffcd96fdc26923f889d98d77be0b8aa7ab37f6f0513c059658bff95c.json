{"ast":null,"code":"var _jsxFileName = \"C:\\\\Windows\\\\System32\\\\ReactProject\\\\my-app\\\\src\\\\components\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"./InsertionSort.css\";\nimport Navbar from '../components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ARRAYSIZE = 95;\nconst InsertionSort = () => {\n  _s();\n  const [primaryArray, setPrimaryArray] = useState([]);\n  const [animationSpeed, setAnimationSpeed] = useState(50);\n  const [disableOptions, setDisableOptions] = useState(false);\n  const randomizeArray = () => {\n    for (let i = 0; i < primaryArray.length; i++) {\n      let bar = document.getElementById(i).style;\n      bar.backgroundColor = \"darkcyan\";\n    }\n    let array = [];\n    for (let i = 0; i < ARRAYSIZE; i++) {\n      array.push(randomVals(20, 400));\n    }\n    setPrimaryArray(array);\n  };\n  const randomVals = (min, max) => {\n    let randomVal = Math.floor(Math.random() * (max - min + 1) + min);\n    return randomVal;\n  };\n  useEffect(() => {\n    randomizeArray();\n  }, []);\n  const sleep = milliSeconds => {\n    return new Promise(resolve => setTimeout(resolve, milliSeconds));\n  };\n  const finishedAnimation = async () => {\n    for (let i = 0; i < primaryArray.length; i++) {\n      let bar = document.getElementById(i).style;\n      bar.backgroundColor = 'green';\n      await sleep(animationSpeed);\n    }\n    setDisableOptions(false);\n  };\n  const insertionSort = async () => {\n    let currentArr = primaryArray;\n    let sorted = false;\n    while (!sorted) {\n      sorted = true;\n      for (let i = 1; i < currentArr.length; i++) {\n        let current = currentArr[i];\n        let j = i - 1;\n        while (j >= 0 && currentArr[j] > current) {\n          currentArr[j + 1] = currentArr[j];\n          setPrimaryArray([...primaryArray, currentArr]);\n          let bar1 = document.getElementById(j + 1).style;\n          let bar2 = document.getElementById(j).style;\n          bar1.backgroundColor = 'white';\n          bar2.backgroundColor = 'white';\n          await sleep(animationSpeed);\n          bar1.backgroundColor = '#FF7F50';\n          bar2.backgroundColor = '#FF7F50';\n          j--;\n          sorted = false;\n        }\n        currentArr[j + 1] = current;\n        setPrimaryArray([...primaryArray, currentArr]);\n      }\n      if (sorted) finishedAnimation();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sortingBars\",\n      children: primaryArray && primaryArray.map((val, key) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bars\",\n          id: key,\n          style: {\n            height: val\n          }\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 7\n  }, this);\n};\n_s(InsertionSort, \"nwNu5KkJFo8Vx7oschro2F0a+Eg=\");\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","ARRAYSIZE","InsertionSort","primaryArray","setPrimaryArray","animationSpeed","setAnimationSpeed","disableOptions","setDisableOptions","randomizeArray","i","length","bar","document","getElementById","style","backgroundColor","array","push","randomVals","min","max","randomVal","Math","floor","random","sleep","milliSeconds","Promise","resolve","setTimeout","finishedAnimation","insertionSort","currentArr","sorted","current","j","bar1","bar2","map","val","key","height"],"sources":["C:/Windows/System32/ReactProject/my-app/src/components/InsertionSort.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport \"./InsertionSort.css\";\r\nimport Navbar from '../components/Navbar';\r\n\r\nconst ARRAYSIZE = 95\r\n\r\nconst InsertionSort = () => {\r\n  const [primaryArray, setPrimaryArray] = useState([])\r\n  const [animationSpeed, setAnimationSpeed] = useState(50)\r\n  const [disableOptions, setDisableOptions] = useState(false)\r\n  \r\n  const randomizeArray = () => {\r\n    for (let i = 0; i < primaryArray.length; i++) {\r\n      let bar = document.getElementById(i).style\r\n      bar.backgroundColor = \"darkcyan\"\r\n    }\r\n    let array = []\r\n    for (let i = 0; i < ARRAYSIZE; i++) {\r\n      array.push(randomVals(20, 400))\r\n    }\r\n\r\n    setPrimaryArray(array)\r\n  }\r\n\r\n  const randomVals = (min, max) => {\r\n    let randomVal = Math.floor(Math.random() * (max - min + 1) + min)\r\n    return randomVal\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomizeArray()\r\n  }, [])\r\n\r\n  const sleep = (milliSeconds) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliSeconds))\r\n  }\r\n\r\n  const finishedAnimation = async () => {\r\n    for (let i = 0; i < primaryArray.length; i++) {\r\n      let bar = document.getElementById(i).style\r\n      bar.backgroundColor = 'green'\r\n      await sleep(animationSpeed)\r\n    }\r\n    setDisableOptions(false)\r\n  }\r\n\r\n  const insertionSort = async () => {\r\n    let currentArr = primaryArray\r\n    let sorted = false\r\n\r\n    while (!sorted) {\r\n      sorted = true\r\n\r\n      for (let i = 1; i < currentArr.length; i++) {\r\n        let current = currentArr[i]\r\n        let j = i - 1\r\n        while (j >= 0 && currentArr[j] > current) {\r\n          currentArr[j + 1] = currentArr[j]\r\n          setPrimaryArray([...primaryArray, currentArr])\r\n\r\n          let bar1 = document.getElementById(j + 1).style\r\n          let bar2 = document.getElementById(j).style\r\n          bar1.backgroundColor = 'white'\r\n          bar2.backgroundColor = 'white'\r\n\r\n          await sleep(animationSpeed)\r\n\r\n          bar1.backgroundColor = '#FF7F50'\r\n          bar2.backgroundColor = '#FF7F50'\r\n\r\n          j--\r\n          sorted = false\r\n        }\r\n        currentArr[j + 1] = current\r\n        setPrimaryArray([...primaryArray, currentArr])\r\n      }\r\n      if (sorted) finishedAnimation()\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div className=''>\r\n        <Navbar/>\r\n        <div className='sortingBars'>\r\n        {primaryArray &&\r\n          primaryArray.map((val, key) => {\r\n            return (\r\n              <div\r\n                className='bars'\r\n                id={key}\r\n                key={key}\r\n                style={{ height: val }}\r\n              ></div>\r\n            )\r\n          })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InsertionSort;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}