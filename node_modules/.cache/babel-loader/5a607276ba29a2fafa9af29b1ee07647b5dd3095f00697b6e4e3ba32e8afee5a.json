{"ast":null,"code":"import pro1 from \"../assets/image3.jpg\";\nimport pro2 from \"../assets/image4.jpg\";\nimport pro3 from \"../assets/image5.jpg\";\nimport pro4 from \"../assets/image6.jpg\";\nimport pro5 from \"../assets/image7.jpg\";\nconst ProjectData = [{\n  imgsrc: pro1,\n  title: \"Insertion Sort\",\n  text: \"Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time by comparisons. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.\",\n  view: \"/About\"\n}, {\n  imgsrc: pro2,\n  title: \"Bubble Sort\",\n  text: \"Bubble sort is a basic algorithm for arranging a string of numbers or other elements in the correct order. The method works by examining each set of adjacent elements in the string, from left to right, switching their positions if they are out of order.\",\n  view: \"youtube.com\"\n}, {\n  imgsrc: pro3,\n  title: \"Merge Sort\",\n  text: \"The Merge Sort algorithm is a sorting algorithm that is based on the Divide and Conquer paradigm. In this algorithm, the array is initially divided into two equal halves and then they are combined in a sorted manner.\",\n  view: \"youtube.com\"\n}, {\n  imgsrc: pro4,\n  title: \"Heap Sort\",\n  text: \"Heap sort processes the elements by creating the min-heap or max-heap using the elements of the given array. Min-heap or max-heap represents the ordering of array in which the root element represents the minimum or maximum element of the array.\",\n  view: \"/InsertionSort\"\n}, {\n  imgsrc: pro5,\n  title: \"Quick Sort\",\n  text: \"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.\",\n  view: \"/InsertionSort\"\n}];\nexport default ProjectData;","map":{"version":3,"names":["pro1","pro2","pro3","pro4","pro5","ProjectData","imgsrc","title","text","view"],"sources":["C:/Windows/System32/ReactProject/my-app/src/components/WorkData.js"],"sourcesContent":["import pro1 from \"../assets/image3.jpg\";\r\nimport pro2 from \"../assets/image4.jpg\";\r\nimport pro3 from \"../assets/image5.jpg\";\r\nimport pro4 from \"../assets/image6.jpg\";\r\nimport pro5 from \"../assets/image7.jpg\";\r\n\r\nconst ProjectData = [\r\n    {\r\n        imgsrc: pro1,\r\n        title : \"Insertion Sort\",\r\n        text: \"Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time by comparisons. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.\",\r\n        view: \"/About\"\r\n    },\r\n    {\r\n        imgsrc: pro2,\r\n        title : \"Bubble Sort\",\r\n        text: \"Bubble sort is a basic algorithm for arranging a string of numbers or other elements in the correct order. The method works by examining each set of adjacent elements in the string, from left to right, switching their positions if they are out of order.\",\r\n        view: \"youtube.com\"\r\n    },\r\n    {\r\n        imgsrc: pro3,\r\n        title : \"Merge Sort\",\r\n        text: \"The Merge Sort algorithm is a sorting algorithm that is based on the Divide and Conquer paradigm. In this algorithm, the array is initially divided into two equal halves and then they are combined in a sorted manner.\",\r\n        view: \"youtube.com\"\r\n    },\r\n    {\r\n        imgsrc: pro4,\r\n        title : \"Heap Sort\",\r\n        text: \"Heap sort processes the elements by creating the min-heap or max-heap using the elements of the given array. Min-heap or max-heap represents the ordering of array in which the root element represents the minimum or maximum element of the array.\",\r\n        view: \"/InsertionSort\"\r\n    },\r\n    {\r\n        imgsrc: pro5,\r\n        title : \"Quick Sort\",\r\n        text: \"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.\",\r\n        view: \"/InsertionSort\"\r\n    },\r\n];\r\n\r\nexport default ProjectData;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,sBAAsB;AACvC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,IAAI,MAAM,sBAAsB;AAEvC,MAAMC,WAAW,GAAG,CAChB;EACIC,MAAM,EAAEN,IAAI;EACZO,KAAK,EAAG,gBAAgB;EACxBC,IAAI,EAAE,iPAAiP;EACvPC,IAAI,EAAE;AACV,CAAC,EACD;EACIH,MAAM,EAAEL,IAAI;EACZM,KAAK,EAAG,aAAa;EACrBC,IAAI,EAAE,+PAA+P;EACrQC,IAAI,EAAE;AACV,CAAC,EACD;EACIH,MAAM,EAAEJ,IAAI;EACZK,KAAK,EAAG,YAAY;EACpBC,IAAI,EAAE,0NAA0N;EAChOC,IAAI,EAAE;AACV,CAAC,EACD;EACIH,MAAM,EAAEH,IAAI;EACZI,KAAK,EAAG,WAAW;EACnBC,IAAI,EAAE,sPAAsP;EAC5PC,IAAI,EAAE;AACV,CAAC,EACD;EACIH,MAAM,EAAEF,IAAI;EACZG,KAAK,EAAG,YAAY;EACpBC,IAAI,EAAE,kSAAkS;EACxSC,IAAI,EAAE;AACV,CAAC,CACJ;AAED,eAAeJ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}